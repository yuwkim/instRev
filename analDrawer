function analDrawer(data,tagData,hackerAnimals,varargin)
p=inputParser;
p.addParameter('yourStartingDay',datetime('2018-11-12'),@isdatetime);
p.addParameter('ytickUnitRew',10,@(x) x>0 && rem(x,1)==0);
p.addParameter('ytickUnitOmt',5,@(x) x>0 && rem(x,1)==0);
p.addParameter('ytickUnitMin',1,@(x) x>0 && rem(x,1)==0);
p.addParameter('ytickUnitPress',20,@(x) x>0 && rem(x,1)==0);
p.addParameter('ytickUnitProb',0.05,@(x) x>0);
p.addParameter('ytickUnitSec',1,@(x) x>0 && rem(x,1)==0);
p.parse(varargin{:});

%fieldsOfData={'totalReward','omission','totalTimeInSec','leftPress','rightPress','pctCorrect','avgRtInSec'};
dataTable = struct2table(data);
totAnimals=table2array(dataTable(:,2));
analTable = struct2table(anal);
analHackerInd=isnan(table2array(analTable(:,6)));
mutantAnimals=[1;2;3;4;5;12];
totAnimals(ismember(totAnimals,find(analHackerInd)))=[];
mutantAnimals(ismember(mutantAnimals,find(analHackerInd)))=[];
boxNum=cat(2,data.boxNum);
wildtyeAnimals=totAnimals(~ismember(totAnimals,mutantAnimals));
biasedArray=string(table2array(analTable(:,5)));
for i=1:length(biasedArray)
    if strcmp(biasedArray(i,1),'None')
        biasedArray(i,1)=0;
    elseif strcmp(biasedArray(i,1),'Left Biased')
        biasedArray(i,1)=-1;
    elseif strcmp(biasedArray(i,1),'Right Biased')
        biasedArray(i,1)=1;
    end
end
analData=table2array(analTable(:,[3 4 6 9]));
for i=1:length(biasedArray)
    analData(i,5)=biasedArray(i,1);
end
muTable=analTable(ismember(boxNum,mutantAnimals),[3 4 9]);
wyTable=analTable(ismember(boxNum,wildtyeAnimals),[3 4 9]);
muData=table2array(muTable);

wyData=table2array(wyTable);

unified=[wyData;muData];
categ=[repmat(char('  WT  '),length(wyData(:,1)),1);...
    repmat(char('Mutant'),length(muData(:,1)),1)];
figure(2);clf;
set(gcf,'position',[50 50 1500 450])
for i=1:length(fieldsOfData)
    r=1;c=length(fieldsOfData);
    subplot(r,c,i);
    wildtypeOnes=ones(length(wyData(:,i)),1);
    mutantOnes=2.*ones(length(muData(:,i)),1);
    boxplot(unified(:,i),categ)
    hold on
    scatter(wildtypeOnes,wyData(:,i),'jitter', 'on', 'jitterAmount', 0.06);
    scatter(mutantOnes,muData(:,i),'jitter', 'on', 'jitterAmount', 0.06);
    minYValue=min([wyData(:,i);muData(:,i)]);
    maxYValue=max([wyData(:,i);muData(:,i)]);
    ytickUnit=[p.Results.ytickUnitRew;p.Results.ytickUnitOmt;p.Results.ytickUnitMin...
        ;p.Results.ytickUnitPress;p.Results.ytickUnitPress;p.Results.ytickUnitProb...
        ;p.Results.ytickUnitSec];
    closestMin=minYValue-rem(minYValue,ytickUnit(i,1));
    closestMax=maxYValue-rem(maxYValue,ytickUnit(i,1))+ytickUnit(i,1);
    switch i
        case 1
            ylabel 'Numbers of Rewards'
            set(gca,'ytick',closestMin:p.Results.ytickUnitRew:closestMax,'ylim',[closestMin closestMax])
        case 2
            ylabel 'Numbers of Omissions'
            set(gca,'ylim',[0 inf],'ytick',closestMin:p.Results.ytickUnitOmt:closestMax,'ylim',[closestMin closestMax])
        case 3
            ylabel 'Session Time (min)'
            set(gca,'ytick',closestMin:closestMax,'ylim',[closestMin closestMax])
        case 4
            ylabel 'Numbers of Pressing Left'
            set(gca,'ytick',closestMin:p.Results.ytickUnitPress:closestMax,'ylim',[closestMin closestMax])
        case 5
            ylabel 'Numbers of Pressing Right'
            set(gca,'ytick',closestMin:p.Results.ytickUnitPress:closestMax,'ylim',[closestMin closestMax])
        case 6
            ylabel 'Probability of Correnct Responses'
            set(gca,'ylim',[closestMin closestMax])
        case 7
            ylabel 'Average Reaction Time (Sec)'
            set(gca,'ylim',[closestMin closestMax])
    end
    set(gca,'XTick',[1 2],'XTickLabel',{'WT','Mutant'});
    if ttest2(wyData(:,i),muData(:,i))
        title '*'
        warning([char(fieldsOfData(1,i)) ' is significant.'])
    end
    box off
end
currentSession=datetime(tagData);
fullVerStarted=p.Results.yourStartingDay;
trainedDays=currentSession-fullVerStarted;
if datetime(currentSession)==datetime('2018-11-09')
    nrTrainningDays=1; % the actual firstday. if you wanna computed a numbers of days, you can use inputparser.
elseif datetime(currentSession)>datetime('2018-12-22')
    nrTrainningDays=datenum(trainedDays)-2.*fix(datenum(trainedDays)/7)-6;
else
    nrTrainningDays=datenum(trainedDays)-2.*fix(datenum(trainedDays)/7)+2;
end

annotation('textbox',[0.30 0.935 0.43 0.08],'VerticalAlignment','middle',...
    'String',['The Result of Day ' num2str(nrTrainningDays) ' full version recording ' tagData],...
    'LineStyle','none','HorizontalAlignment','center','FontSize',12,'FitBoxToText','off');
if ~isempty(hackerAnimals)
    annotation('textbox',[0.43 0.014 0.18 0.062],'VerticalAlignment','middle',...
        'String',['Hacker Animal(s) in box: ' num2str(hackerAnimals) ' is/are excluded.'],...
        'HorizontalAlignment','center','FontSize',11,'FitBoxToText','off','EdgeColor','none');
end
end
